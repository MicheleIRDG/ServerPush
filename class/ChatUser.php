<?php
class ChatUser
{
	private int $user_id;
	private string $user_name;
	private string $user_email;
	private string $user_password;
	private string $user_profile;
	private string $user_status;
	private string $user_created_on;
	private string $user_verification_code;
	private string $user_login_status;
	private int $user_connection_id;
	public PDO $connect;

	public function __construct()
	{
		require_once('Database.php');

		$database_object = new Database();

		$this->connect = $database_object->connect();
	}

	// Autogenerated Methods

	/**
	 * @param $user_id
	 * @return void
	 */
	public function setUserId($user_id): void
	{
		$this->user_id = $user_id;
	}

	/**
	 * @return int
	 */
	public function getUserId(): int
	{
		return $this->user_id;
	}

	/**
	 * @param $user_name
	 * @return void
	 */
	public function setUserName($user_name): void
	{
		$this->user_name = $user_name;
	}

	/**
	 * @return string
	 */
	public function getUserName(): string
	{
		return $this->user_name;
	}

	/**
	 * @param $user_email
	 * @return void
	 */
	public function setUserEmail($user_email): void
	{
		$this->user_email = $user_email;
	}

	/**
	 * @return string
	 */
	public function getUserEmail(): string
	{
		return $this->user_email;
	}

	/**
	 * @param $user_password
	 * @return void
	 */
	public function setUserPassword($user_password): void
	{
		$this->user_password = $user_password;
	}

	/**
	 * @return string
	 */
	public function getUserPassword(): string
	{
		return $this->user_password;
	}

	/**
	 * @param $user_profile
	 * @return void
	 */
	public function setUserProfile($user_profile): void
	{
		$this->user_profile = $user_profile;
	}

	/**
	 * @return string
	 */
	public function getUserProfile(): string
	{
		return $this->user_profile;
	}

	/**
	 * @param $user_status
	 * @return void
	 */
	public function setUserStatus($user_status): void
	{
		$this->user_status = $user_status;
	}

	/**
	 * @return string
	 */
	public function getUserStatus(): string
	{
		return $this->user_status;
	}

	/**
	 * @param $user_created_on
	 * @return void
	 */
	public function setUserCreatedOn($user_created_on): void
	{
		$this->user_created_on = $user_created_on;
	}

	/**
	 * @return string
	 */
	public function getUserCreatedOn(): string
	{
		return $this->user_created_on;
	}

	/**
	 * @param $user_verification_code
	 * @return void
	 */
	public function setUserVerificationCode($user_verification_code): void
	{
		$this->user_verification_code = $user_verification_code;
	}

	/**
	 * @return string
	 */
	public function getUserVerificationCode(): string
	{
		return $this->user_verification_code;
	}

	/**
	 * @param $user_login_status
	 * @return void
	 */
	public function setUserLoginStatus($user_login_status): void
	{
		$this->user_login_status = $user_login_status;
	}

	/**
	 * @return string
	 */
	public function getUserLoginStatus(): string
	{
		return $this->user_login_status;
	}

	/**
	 * @param $user_verification_code
	 * @return void
	 */
	public function setUserToken($user_verification_code): void
	{
		$this->user_verification_code = $user_verification_code;
	}

	/**
	 * @return string
	 */
	public function getUserToken(): string
	{
		return $this->user_verification_code;
	}

	/**
	 * @param $user_connection_id
	 * @return void
	 */
	public function setUserConnectionId($user_connection_id): void
	{
		$this->user_connection_id = $user_connection_id;
	}

	/**
	 * @return int
	 */
	public function getUserConnectionId(): int
	{
		return $this->user_connection_id;
	}

	// Custom Methods

	/**
	 * @return mixed
	 */
	public function get_user_data_by_email()
	{
		$query = "
		SELECT * FROM chat_user_table 
		WHERE user_email = :user_email
		";

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_email', $this->user_email);

		if($statement->execute())
		{
			$user_data = $statement->fetch(PDO::FETCH_ASSOC);
		}
		return $user_data;
	}

	/**
	 * @return bool
	 */
	public function insert_user(): bool
	{
		$query = "
		INSERT INTO chat_user_table (user_name, user_email, user_password, user_profile, user_status, user_created_on, user_verification_code) 
		VALUES (:user_name, :user_email, :user_password, :user_profile, :user_status, :user_created_on, :user_verification_code)
		";
		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_name', $this->user_name);

		$statement->bindParam(':user_email', $this->user_email);

		$statement->bindParam(':user_password', $this->user_password);

		$statement->bindParam(':user_profile', $this->user_profile);

		$statement->bindParam(':user_status', $this->user_status);

		$statement->bindParam(':user_created_on', $this->user_created_on);

		$statement->bindParam(':user_verification_code', $this->user_verification_code);

		if($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * @return bool
	 */
	public function update_user_login_data(): bool
	{
		$query = "
		UPDATE chat_user_table 
		SET user_login_status = :user_login_status, user_verification_code = :user_verification_code  
		WHERE user_id = :user_id
		";

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_login_status', $this->user_login_status);
		$statement->bindParam(':user_verification_code', $this->user_verification_code);
		$statement->bindParam(':user_id', $this->user_id);

		if($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * @return array|mixed
	 */
	public function get_user_data_by_id(): mixed
	{
		$query = "
		SELECT * FROM chat_user_table 
		WHERE user_id = :user_id";

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_id', $this->user_id);

		try
		{
			if($statement->execute())
			{
				$user_data = $statement->fetch(PDO::FETCH_ASSOC);
			}
			else
			{
				$user_data = array();
			}
		}
		catch (Exception $error)
		{
			echo $error->getMessage();
		}
		return $user_data;
	}

	/**
	 * @return bool|array
	 */
	public function get_user_all_data(): bool|array
	{
		$query = "
		SELECT * FROM chat_user_table 
		";

		$statement = $this->connect->prepare($query);

		$statement->execute();

		$data = $statement->fetchAll(PDO::FETCH_ASSOC);

		return $data;
	}

	/**
	 * @return void
	 */
	public function update_user_connection_id(): void
	{
		$query = "
		UPDATE chat_user_table 
		SET user_connection_id = :user_connection_id 
		WHERE user_verification_code = :user_verification_code
		";

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_connection_id', $this->user_connection_id);

		//$statement->bindParam(':user_token', $this->user_token);
		$statement->bindParam(':user_verification_code', $this->user_verification_code);


		$statement->execute();
	}

	/**
	 * @return mixed
	 */
	public function get_user_id_from_token(): mixed
	{
		$query = "
		SELECT user_id FROM chat_user_table 
		WHERE user_verification_code = :user_verification_code
		";

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_verification_code', $this->user_verification_code);

		$statement->execute();

		$user_id = $statement->fetch(PDO::FETCH_ASSOC);

		return $user_id;
	}
} // End of Class
?>

